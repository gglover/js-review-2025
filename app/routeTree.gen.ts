/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsImport } from './routes/posts'
import { Route as PostsCreateImport } from './routes/posts/create'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as PostsPostIdEditImport } from './routes/posts/$postId.edit'

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const PostsCreateRoute = PostsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => PostsRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const PostsPostIdEditRoute = PostsPostIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => PostsPostIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/posts/create': {
      id: '/posts/create'
      path: '/create'
      fullPath: '/posts/create'
      preLoaderRoute: typeof PostsCreateImport
      parentRoute: typeof PostsImport
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditImport
      parentRoute: typeof PostsPostIdImport
    }
  }
}

// Create and export the route tree

interface PostsPostIdRouteChildren {
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
}

const PostsPostIdRouteChildren: PostsPostIdRouteChildren = {
  PostsPostIdEditRoute: PostsPostIdEditRoute,
}

const PostsPostIdRouteWithChildren = PostsPostIdRoute._addFileChildren(
  PostsPostIdRouteChildren,
)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRouteWithChildren
  PostsCreateRoute: typeof PostsCreateRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRouteWithChildren,
  PostsCreateRoute: PostsCreateRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/posts': typeof PostsRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/posts/create': typeof PostsCreateRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}

export interface FileRoutesByTo {
  '/posts': typeof PostsRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/posts/create': typeof PostsCreateRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/posts': typeof PostsRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/posts/create': typeof PostsCreateRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/posts'
    | '/posts/$postId'
    | '/posts/create'
    | '/posts/$postId/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/posts' | '/posts/$postId' | '/posts/create' | '/posts/$postId/edit'
  id:
    | '__root__'
    | '/posts'
    | '/posts/$postId'
    | '/posts/create'
    | '/posts/$postId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PostsRoute: typeof PostsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PostsRoute: PostsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/posts"
      ]
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/create"
      ]
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx",
      "parent": "/posts",
      "children": [
        "/posts/$postId/edit"
      ]
    },
    "/posts/create": {
      "filePath": "posts/create.tsx",
      "parent": "/posts"
    },
    "/posts/$postId/edit": {
      "filePath": "posts/$postId.edit.tsx",
      "parent": "/posts/$postId"
    }
  }
}
ROUTE_MANIFEST_END */
